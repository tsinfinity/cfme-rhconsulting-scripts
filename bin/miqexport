#!/usr/bin/env bash

#STFU
pushd () {
    command pushd "$@" > /dev/null
}

popd () {
    command popd "$@" > /dev/null
}

assert_num_args () {
  num_args_received=$1
  num_args_expected=$2
  if [ "$num_args_received" -ne "$num_args_expected" ]
  then
    echo "Error: Wrong number of arguments (expected=$num_args_expected received=$num_args_received)"
    usage
    exit 1
  fi
}

assert_export_dir_exists () {
  export_dir=$1
  if [ ! -d "$export_dir" ]
  then
    echo "Export directory doesn't exist! [${export_dir}]"
    exit 1
  fi
}

mkdir_if_needed() {
  if [ ! -d "$1" ]
  then
    mkdir "$1"
  fi
}

op_all () {
  assert_num_args $# 1
  EXPORT_DIR=$(readlink -v -f "$1")

  echo "Exporting everything to [$EXPORT_DIR]"

  mkdir_if_needed $EXPORT_DIR
  
  pushd $EXPORT_DIR

  mkdir_if_needed "provision_dialogs"
  op_provision_dialogs provision_dialogs &

  mkdir_if_needed "service_dialogs"
  op_service_dialogs service_dialogs &
  
  mkdir_if_needed "service_catalogs"
  op_service_catalogs service_catalogs &

  mkdir_if_needed "roles"
  op_roles roles &

  mkdir_if_needed "tags"
  op_tags tags &

  mkdir_if_needed "buttons"
  op_buttons buttons &

  mkdir_if_needed "customization_templates"
  op_customization_templates customization_templates &

  mkdir_if_needed "orchestration_templates"
  op_orchestration_templates orchestration_templates &

  mkdir_if_needed "reports"
  op_reports reports &

  mkdir_if_needed "widgets"
  op_widgets widgets &

  mkdir_if_needed "alerts"
  op_alerts alerts &

  mkdir_if_needed "alertsets"
  op_alertsets alertsets &

  mkdir_if_needed "policies"
  op_policies policies &

  mkdir_if_needed "scanitems"
  op_scanitems scanitems &
  
  mkdir_if_needed "scriptsrc"
  op_scriptsrc scriptsrc &

  mkdir_if_needed "schedules"
  op_schedules schedules &

  mkdir_if_needed "automate"
  pushd "automate"
  DOMAIN_ROOT_DIR=`pwd`
  pushd /var/www/miq/vmdb
  DOMAINS=$(bin/rake evm:automate:list_class |tail -n+3 |cut -d/ -f2 -|sed 's|/||'|egrep -v '^(ManageIQ|RedHat)$'|sort|uniq)

  while read -r DOMAIN; do
    DOMAINDIR=$(readlink -v -f "$DOMAIN_ROOT_DIR")
    mkdir_if_needed $DOMAINDIR/$DOMAIN
    op_domain $DOMAIN $DOMAINDIR &
  done <<< "$DOMAINS"

  popd

  for job in `jobs -p` 
  do
    echo "waiting on background job: [$job]"
    wait $job
  done
}

op_domain () {
  assert_num_args $# 2
  DOMAIN_NAME=$1
  EXPORT_DIR=$(readlink -v -f "$2")
  assert_export_dir_exists "$EXPORT_DIR"
  
  pushd /var/www/miq/vmdb
  bin/rake "rhconsulting:miq_ae_datastore:export[${DOMAIN_NAME},${EXPORT_DIR}]"
  popd
}

op_reports () {
  assert_num_args $# 1
  EXPORT_DIR=$(readlink -v -f "$1")
  assert_export_dir_exists "$EXPORT_DIR"
  
  pushd /var/www/miq/vmdb
  bin/rake "rhconsulting:miq_reports:export[${EXPORT_DIR},keep_spaces=${KEEP_SPACES}]"
  popd
}

op_widgets () {
  assert_num_args $# 1
  EXPORT_DIR=$(readlink -v -f "$1")
  assert_export_dir_exists "$EXPORT_DIR"
  
  pushd /var/www/miq/vmdb
  bin/rake "rhconsulting:miq_widgets:export[${EXPORT_DIR},keep_spaces=${KEEP_SPACES}]"
  popd
}

op_alerts () {
  assert_num_args $# 1
  EXPORT_DIR=$(readlink -v -f "$1")
  assert_export_dir_exists "$EXPORT_DIR"
  
  pushd /var/www/miq/vmdb
  bin/rake "rhconsulting:miq_alerts:export[${EXPORT_DIR},keep_spaces=${KEEP_SPACES}]"
  popd
}

op_alertsets () {
  assert_num_args $# 1
  EXPORT_DIR=$(readlink -v -f "$1")
  assert_export_dir_exists "$EXPORT_DIR"

  pushd /var/www/miq/vmdb
  bin/rake "rhconsulting:miq_alertsets:export[${EXPORT_DIR}]"
  popd
}

op_policies () {
  assert_num_args $# 1
  EXPORT_DIR=$(readlink -v -f "$1")
  assert_export_dir_exists "$EXPORT_DIR"

  pushd /var/www/miq/vmdb
  bin/rake "rhconsulting:miq_policies:export[${EXPORT_DIR},keep_spaces=${KEEP_SPACES}]"
  popd
}

op_scanitems () {
  assert_num_args $# 1
  EXPORT_DIR=$(readlink -v -f "$1")
  assert_export_dir_exists "$EXPORT_DIR"

  pushd /var/www/miq/vmdb
  bin/rake "rhconsulting:miq_scanprofiles:export[${EXPORT_DIR},keep_spaces=${KEEP_SPACES}]"
  popd
}

op_scriptsrc () {
  assert_num_args $# 1
  EXPORT_DIR=$(readlink -v -f "$1")
  assert_export_dir_exists "$EXPORT_DIR"

  pushd /var/www/miq/vmdb
  bin/rake "rhconsulting:miq_scriptsrc:export[${EXPORT_DIR},keep_spaces=${KEEP_SPACES}]"
  popd
}

op_provision_dialogs () {
  assert_num_args $# 1
  EXPORT_DIR=$(readlink -v -f "$1")
  assert_export_dir_exists "$EXPORT_DIR"

  pushd /var/www/miq/vmdb
  bin/rake "rhconsulting:provision_dialogs:export[${EXPORT_DIR},keep_spaces=${KEEP_SPACES}]"
  popd
}

op_orchestration_templates () {
  assert_num_args $# 1
  EXPORT_DIR=$(readlink -v -f "$1")
  assert_export_dir_exists "$EXPORT_DIR"

  pushd /var/www/miq/vmdb
  bin/rake "rhconsulting:orchestration_templates:export[${EXPORT_DIR},keep_spaces=${KEEP_SPACES}]"
  popd
}

op_service_dialogs () {
  assert_num_args $# 1
  EXPORT_DIR=$(readlink -v -f "$1")
  assert_export_dir_exists "$EXPORT_DIR"

  pushd /var/www/miq/vmdb
  bin/rake "rhconsulting:service_dialogs:export[${EXPORT_DIR},keep_spaces=${KEEP_SPACES}]"
  popd
}

op_schedules () {
  assert_num_args $# 1
  EXPORT_DIR=$(readlink -v -f "$1")
  assert_export_dir_exists "$EXPORT_DIR"

  pushd /var/www/miq/vmdb
  bin/rake "rhconsulting:miq_schedules:export[${EXPORT_DIR},keep_spaces=${KEEP_SPACES}]"
  popd
}

op_service_catalogs () {
  assert_num_args $# 1
  EXPORT_DIR=$(readlink -v -f "$1")
  assert_export_dir_exists "$EXPORT_DIR"

  pushd /var/www/miq/vmdb
  bin/rake "rhconsulting:service_catalogs:export[${EXPORT_DIR},keep_spaces=${KEEP_SPACES}]"
  popd
}

op_roles () {
  assert_num_args $# 1
  EXPORT_FILE=$(readlink -v -f "$1")
  EXPORT_DIR=$(dirname "$EXPORT_FILE")
  assert_export_dir_exists "$EXPORT_DIR"

  pushd /var/www/miq/vmdb
  bin/rake "rhconsulting:roles:export[${EXPORT_FILE},keep_spaces=${KEEP_SPACES}]"
  popd
}

op_tags () {
  assert_num_args $# 1
  EXPORT_FILE=$(readlink -v -f "$1")
  EXPORT_DIR=$(dirname "$EXPORT_FILE")
  assert_export_dir_exists "$EXPORT_DIR"

  pushd /var/www/miq/vmdb
  bin/rake "rhconsulting:tags:export[${EXPORT_FILE},keep_spaces=${KEEP_SPACES}]"
  popd
}

op_buttons () {
  assert_num_args $# 1
  EXPORT_FILE=$(readlink -v -f "$1")
  EXPORT_DIR=$(dirname "$EXPORT_FILE")
  assert_export_dir_exists "$EXPORT_DIR"

  pushd /var/www/miq/vmdb
  bin/rake "rhconsulting:buttons:export[${EXPORT_FILE},keep_spaces=${KEEP_SPACES}]"
  popd
}

op_customization_templates () {
  assert_num_args $# 1
  EXPORT_FILE=$(readlink -v -f "$1")
  EXPORT_DIR=$(dirname "$EXPORT_FILE")
  assert_export_dir_exists "$EXPORT_DIR"

  pushd /var/www/miq/vmdb
  bin/rake "rhconsulting:customization_templates:export[${EXPORT_FILE},keep_spaces=${KEEP_SPACES}]"
  popd
}

contains () {
  SEARCH_TERM=$1
  shift
  LIST=$@

  for element in $LIST; do
    if [[ "$SEARCH_TERM" == "$element" ]]; then
      return 0
    fi
  done

  return 1  
}

parse_arguments () {
  # initialize non-required arguments before the loop in case they are
  # not present in the command line
  KEEP_SPACES="false"

  # http://stackoverflow.com/questions/402377/using-getopts-in-bash-shell-script-to-get-long-and-short-command-line-options
  # http://stackoverflow.com/questions/14786984/best-way-to-parse-cmdline-args-bash
  while [[ $# -ge 1 ]]
  do
    arg="$1"
    case "$arg" in
      -s|--keep-spaces)
        KEEP_SPACES="true"
        shift # past the argument
        ;;
      --)
        shift # past the argument
        break # stop parsing arguments
        ;;
      *)
        # unknown option
        break # stop parsing arguments
        ;;
    esac
  done

  # if there are any required arguments check for them here

  # pass the shifted arguments back to the caller
  remaining_args="$@"
}

parse_action () {
  AVAILABLE_PARSERS=`compgen -A function | grep '^op_'`

  obj_type="$1"
  op_func="op_${obj_type}"
  contains $op_func $AVAILABLE_PARSERS; VALID_OP=$?

  if [ $VALID_OP -eq 0 ]
  then
    shift
    $op_func "$@"
  else
    echo "Error: Unknown object type: $obj_type"
    usage
    exit 1
  fi
}

usage () {
progname=`basename $0`

  cat << EOF
Usage: $progname [OPTION...] <object_type> <additional_params> <exportdest>

This command exports the specified object type into the <exportdest>,
which may be a file or directory.

<additional_params> may be required depending on the type of object to be
exported.

Available Object Types:
  provision_dialogs                Export provisioning dialogs.
  service_dialogs                  Export service dialogs.
  service_catalogs                 Export service catalogs.
  roles                            Export user roles.
  tags                             Export tags.
  buttons                          Export buttons.
  customization_templates          Export customization templates.
  orchestration_templates          Export orchestration templates.
  reports                          Export custom reports.
  widgets                          Export custom widgets.
  alerts                           Export alerts.
  alertsets                        Export alert sets.
  policies                         Export policies.
  scanitems                        Export scanitems.
  scriptsrc                        Export config script sources.
  schedules                        Export schedules (non-widget type only).
  domain <name>                    Export the specified domain from the
                                   Automate Engine Datastore. <name> MUST
                                   be specified.
  all <target_dir>                 Export everything to target_dir

Options:
  -s, --keep-spaces                Export filenames with spaces instead of
                                   replacing the spaces with underscores.
                                   (this preserves old behavior)

Report bugs and feature requests to
https://github.com/rhtconsulting/cfme-rhconsulting-scripts

EOF

}

parse_arguments "$@"
parse_action "$remaining_args"
exit 0
